/*
Bridge Utils
Copyright (C) 2025 Kaito Udagawa umireon@kaito.tokyo

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program. If not, see <https://www.gnu.org/licenses/>
*/

uniform float4x4 ViewProj;
uniform texture2d image;

uniform texture2d image0;
uniform texture2d image1;
uniform texture2d image2;
uniform texture2d image3;
uniform texture2d image4;

sampler_state def_sampler
{
	Filter = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertInOut VSDefault(VertInOut vert_in)
{
	VertInOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv = vert_in.uv;
	return vert_out;
}

float4 PSDraw(VertInOut vert_in) : TARGET
{
	return image.Sample(def_sampler, vert_in.uv);
}

float4 PSConvertToGrayscale(VertInOut vert_in) : TARGET
{
	float4 color = image.Sample(def_sampler, vert_in.uv);
	float luma = dot(color.rgb, float3(0.2126, 0.7152, 0.0722));
	return float4(luma, luma, luma, 1.0f);
}

float4 PSConvertToHSV(VertInOut vert_in) : TARGET
{
	float4 c = image.Sample(def_sampler, vert_in.uv);
	float4 K = float4(0.0f, -1.0f / 3.0f, 2.0f / 3.0f, -1.0f);

	float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
	float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;

	float h = abs(q.z + (q.w - q.y) / (6.0 * d + e));
	float s = d / (q.x + e);
	float v = q.x;

	return float4(v, s, h, 1.0f);
}

#define MEDIAN_SWAP(a, b) { float temp=a; a=min(a,b); b=max(temp,b); }

float median5(float v0, float v1, float v2, float v3, float v4)
{
	MEDIAN_SWAP(v0, v1);
	MEDIAN_SWAP(v3, v4);
	MEDIAN_SWAP(v0, v3);
	MEDIAN_SWAP(v1, v4);
	MEDIAN_SWAP(v1, v2);
	MEDIAN_SWAP(v2, v3);
	MEDIAN_SWAP(v1, v2);
	return v2;
}

float4 PSMedianFiltering5(VertInOut vert_in) : TARGET
{
	float2 uv = vert_in.uv;

	float v0 = image0.Sample(def_sampler, uv).r;
	float v1 = image1.Sample(def_sampler, uv).r;
	float v2 = image2.Sample(def_sampler, uv).r;
	float v3 = image3.Sample(def_sampler, uv).r;
	float v4 = image4.Sample(def_sampler, uv).r;

	float v = median5(v0, v1, v2, v3, v4);

	return float4(v, v, v, 1.0f);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSDraw(vert_in);
	}
}

technique ConvertToGrayscale
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSConvertToGrayscale(vert_in);
	}
}

technique ConvertToHSV
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSConvertToHSV(vert_in);
	}
}

technique MedianFiltering5
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSMedianFiltering5(vert_in);
	}
}
